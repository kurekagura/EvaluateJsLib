@page
@model WebApp.Pages.Mask.IndexModel
@{
    <style>
        .img-container {
            display: flex;
            /* flex-direction: row; */
            justify-content: flex-start;
            align-items: flex-start;
            width: 300px; /* 画像のサイズ + 枠線の分 */
            height: 300px; /* 画像のサイズ + 枠線の分 */
            background: repeating-linear-gradient(45deg, #eee, #eee 2px, #fff 2px, #fff 4px);
            /* background-size: 8px 8px; */
        }

        .img-origin {
            /* This rule is very important, please don't ignore this for cropper.js */
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
            /* border: 1px solid #000; */
        }
    </style>
}

<h1>Fabric.js(Mask)</h1>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            @* Cオリジナル画像用（img要素ではない） *@
            <div id="IdCanvasDI" class="img-container">
                <canvas id="IdCanvas"></canvas>
            </div>
        </div>

        <div class="col-md-6">
            @* Mask後のプレビュー用 *@
            <div class="img-container">
                <img id="IdPreviewIM" class="img-origin" alt="preview image" />
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        $(() => {
            //img要素を存在させない方法
            const img = new Image();

            //img.src = '@Url.Content("~/img/negi_green_onion600x300.png")';
            img.src = '@Url.Content("~/img/negi_green_onion300x600.png")';

            $(img).on('load', function (e) {
                console.log('load!');

                //Imageオブジェクト
                var imgObj = e.target;
                console.log('受信画像サイズ', imgObj.width, imgObj.height);

                //表示サイズ（ここではw:300, h:300）にフィットさせる拡大縮小率が必要
                const origin_width = imgObj.width;
                const origin_height = imgObj.height;
                const scale = calcFitSquareRatio(origin_width, origin_height, 300);
                console.log('アスペクトフィット', scale);
                //サイズ変更
                imgObj.width = imgObj.width * scale;
                imgObj.height = imgObj.height * scale;
                console.log('拡大縮小後（フィット）', imgObj.width, imgObj.height);

                console.log(`${imgObj.width},${imgObj.height}`);

                //img要素でなくImageの場合はclientWidth/clientHeightは0なので利用不可
                const squareLen = Math.max(imgObj.width, imgObj.height);
                console.log('squareLen', squareLen);

                console.log(e.target);
                var canvas = new fabric.Canvas('IdCanvas');
                console.log('fablic.Canvasの設定サイズ', imgObj.width, imgObj.height);
                canvas.setWidth(imgObj.width);
                canvas.setHeight(imgObj.height);
                // var canvasContainer = document.getElementById('IdCanvasDI');

                var fabImg = new fabric.Image(imgObj, {
                    selectable: false,
                    left: 0,
                    top: 0
                });

                //縦長横長で違える。
                if (imgObj.width > imgObj.height) {
                    fabImg.scaleToWidth(squareLen);
                } else {
                    fabImg.scaleToHeight(squareLen);
                }

                canvas.add(fabImg); //canvasへFabricImage追加

                // const rect = createMaskFabricRect(imgObj.width / 4, imgObj.height / 4, imgObj.width / 2, imgObj.height / 2);
                // canvas.add(rect);
                // rect.on('modified', (options) => onModifiedRect(options, imgObj, origin_width, origin_height, scale, $('#IdPreviewIM')));
                // rect.fire('modified', { target: rect }); //初期化時にマニュアル発火

                const circle = createMaskFabricCircle(imgObj.width * (1 / 4), imgObj.height * (1 / 4), Math.min(imgObj.width, imgObj.height) / 4);
                canvas.add(circle);
                circle.on('modified', (options) => onModifiedCircle(options, imgObj, origin_width, origin_height, scale, $('#IdPreviewIM')));
                circle.fire('modified', { target: circle }); //初期化時にマニュアル発火
            });

        });
    </script>
}